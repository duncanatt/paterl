interface Id_client_mb {
  Id(Int)
}

interface Ts_client_mb {
  Ts(Int)
}

interface Id_server_mb {
  Init(Int),
  Get(Id_client_mb!)
}

interface Ts_server_mb {
  Now(Ts_client_mb!)
}

def id_server(mb0: Id_server_mb?): (Unit * Id_server_mb?) {
  guard mb0: Init.*Get {
    receive Init(n) from mb1 ->
      id_server_loop(mb1, n)
  }
}

def id_server_loop(mb2: Id_server_mb?, n: Int): (Unit * Id_server_mb?) {
  guard mb2: *Get {
    empty(mb5) ->
      ((), mb5)
    receive Get(client) from mb3 ->
      let (v0, mb4) =
        (client ! Id(n), mb3)
      in
        id_server_loop(mb4, n + 1)
  }
}

def ts_server(mb6: Ts_server_mb?): (Unit * Ts_server_mb?) {
  guard mb6: *Now {
    empty(mb10) ->
      ((), mb10)
    receive Now(client) from mb7 ->
      let (ts, mb8) =
        (0, mb7)
      in
        let (v1, mb9) =
          (client ! Ts(ts), mb8)
        in
          ts_server(mb9)
  }
}

def id_asy(mb11: Id_client_mb?, server: Id_server_mb!): (Unit * Id_client_mb?) {
  let (self, mb12) =
    (mb11, mb11)
  in
    (server ! Get(self), mb12)
}

def id_get(mb13: Id_client_mb?): (Int * Id_client_mb?) {
  guard mb13: Id {
    receive Id(id) from mb14 ->
      (id, mb14)
  }
}

def ts_asy(mb15: Ts_client_mb?, server: Ts_server_mb!): (Unit * Ts_client_mb?) {
  let (self, mb16) =
    (mb15, mb15)
  in
    (server ! Now(self), mb16)
}

def ts_get(mb16: Ts_client_mb?): (Int * Ts_client_mb?) {
  guard mb16: Ts {
    receive Ts(ts) from mb17 ->
      (ts, mb17)
  }
}

def main(mb18: Id_client_mb?, mb19: Ts_client_mb?): (Unit * Id_client_mb? * Ts_client_mb?) {
  let(idserver, mb22, mb23) =
    (let mb20 =
      new [Id_server_mb]
    in
      let y =
        spawn {
          let (x, mb21) =
            id_server(mb20)
          in
            free(mb21)
        }
      in
        mb20, mb18, mb19)
  in
    let (tsserver, mb26, mb27) =
      (let mb24 =
        new [Ts_server_mb]
      in
        let x =
          spawn {
            let (x, mb25) =
              ts_server(mb24)
            in
              free(mb25)
          }
        in
        mb24, mb22, mb23)
    in
      let (v3, mb28, mb29) =
        (idserver ! Init(5), mb26, mb27)
      in
        let (v4, mb30) =
          id_asy(mb28, idserver)
        in
          let(v5, mb31) =
            ts_asy(mb29, tsserver)
          in
            let (ts, mb32) =
              ts_get(mb31)
            in
              let (v6, mb33, mb34) =
                ((), mb30, mb32)
              in
                let (id, mb35) =
                  id_get(mb33)
                in
                  ((), mb35, mb34)
}

def main'(): Unit {
  let mb36 =
    new [Id_client_mb]
  in
    let mb37 =
      new [Ts_client_mb]
    in
      let (x, mb38, mb39) =
        main(mb36, mb37)
      in
        let y =
          free(mb38)
        in
          free(mb39)
}





